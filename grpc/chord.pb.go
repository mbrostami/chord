// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chord.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Replication struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Replication) Reset()         { *m = Replication{} }
func (m *Replication) String() string { return proto.CompactTextString(m) }
func (*Replication) ProtoMessage()    {}
func (*Replication) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{0}
}

func (m *Replication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Replication.Unmarshal(m, b)
}
func (m *Replication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Replication.Marshal(b, m, deterministic)
}
func (m *Replication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Replication.Merge(m, src)
}
func (m *Replication) XXX_Size() int {
	return xxx_messageInfo_Replication.Size(m)
}
func (m *Replication) XXX_DiscardUnknown() {
	xxx_messageInfo_Replication.DiscardUnknown(m)
}

var xxx_messageInfo_Replication proto.InternalMessageInfo

func (m *Replication) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Lookup struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Lookup) Reset()         { *m = Lookup{} }
func (m *Lookup) String() string { return proto.CompactTextString(m) }
func (*Lookup) ProtoMessage()    {}
func (*Lookup) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{1}
}

func (m *Lookup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Lookup.Unmarshal(m, b)
}
func (m *Lookup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Lookup.Marshal(b, m, deterministic)
}
func (m *Lookup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lookup.Merge(m, src)
}
func (m *Lookup) XXX_Size() int {
	return xxx_messageInfo_Lookup.Size(m)
}
func (m *Lookup) XXX_DiscardUnknown() {
	xxx_messageInfo_Lookup.DiscardUnknown(m)
}

var xxx_messageInfo_Lookup proto.InternalMessageInfo

func (m *Lookup) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type MerkleNode struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Left                 []byte   `protobuf:"bytes,2,opt,name=Left,proto3" json:"Left,omitempty"`
	Right                []byte   `protobuf:"bytes,3,opt,name=Right,proto3" json:"Right,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MerkleNode) Reset()         { *m = MerkleNode{} }
func (m *MerkleNode) String() string { return proto.CompactTextString(m) }
func (*MerkleNode) ProtoMessage()    {}
func (*MerkleNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{2}
}

func (m *MerkleNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MerkleNode.Unmarshal(m, b)
}
func (m *MerkleNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MerkleNode.Marshal(b, m, deterministic)
}
func (m *MerkleNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleNode.Merge(m, src)
}
func (m *MerkleNode) XXX_Size() int {
	return xxx_messageInfo_MerkleNode.Size(m)
}
func (m *MerkleNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleNode.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleNode proto.InternalMessageInfo

func (m *MerkleNode) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *MerkleNode) GetLeft() []byte {
	if m != nil {
		return m.Left
	}
	return nil
}

func (m *MerkleNode) GetRight() []byte {
	if m != nil {
		return m.Right
	}
	return nil
}

type MerkleTree struct {
	Nodes                []*MerkleNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	RootHash             []byte        `protobuf:"bytes,2,opt,name=rootHash,proto3" json:"rootHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MerkleTree) Reset()         { *m = MerkleTree{} }
func (m *MerkleTree) String() string { return proto.CompactTextString(m) }
func (*MerkleTree) ProtoMessage()    {}
func (*MerkleTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{3}
}

func (m *MerkleTree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MerkleTree.Unmarshal(m, b)
}
func (m *MerkleTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MerkleTree.Marshal(b, m, deterministic)
}
func (m *MerkleTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleTree.Merge(m, src)
}
func (m *MerkleTree) XXX_Size() int {
	return xxx_messageInfo_MerkleTree.Size(m)
}
func (m *MerkleTree) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleTree.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleTree proto.InternalMessageInfo

func (m *MerkleTree) GetNodes() []*MerkleNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *MerkleTree) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

type ForwardSyncData struct {
	Data                 []byte      `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	PredecessorListHash  []byte      `protobuf:"bytes,2,opt,name=predecessorListHash,proto3" json:"predecessorListHash,omitempty"`
	MerkleTree           *MerkleTree `protobuf:"bytes,3,opt,name=merkleTree,proto3" json:"merkleTree,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ForwardSyncData) Reset()         { *m = ForwardSyncData{} }
func (m *ForwardSyncData) String() string { return proto.CompactTextString(m) }
func (*ForwardSyncData) ProtoMessage()    {}
func (*ForwardSyncData) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{4}
}

func (m *ForwardSyncData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForwardSyncData.Unmarshal(m, b)
}
func (m *ForwardSyncData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForwardSyncData.Marshal(b, m, deterministic)
}
func (m *ForwardSyncData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardSyncData.Merge(m, src)
}
func (m *ForwardSyncData) XXX_Size() int {
	return xxx_messageInfo_ForwardSyncData.Size(m)
}
func (m *ForwardSyncData) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardSyncData.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardSyncData proto.InternalMessageInfo

func (m *ForwardSyncData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ForwardSyncData) GetPredecessorListHash() []byte {
	if m != nil {
		return m.PredecessorListHash
	}
	return nil
}

func (m *ForwardSyncData) GetMerkleTree() *MerkleTree {
	if m != nil {
		return m.MerkleTree
	}
	return nil
}

type Content struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{5}
}

func (m *Content) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Content.Unmarshal(m, b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Content.Marshal(b, m, deterministic)
}
func (m *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(m, src)
}
func (m *Content) XXX_Size() int {
	return xxx_messageInfo_Content.Size(m)
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Node struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{6}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *Node) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type StablizerData struct {
	Predecessor          *Node    `protobuf:"bytes,1,opt,name=Predecessor,proto3" json:"Predecessor,omitempty"`
	SuccessorList        []*Node  `protobuf:"bytes,2,rep,name=SuccessorList,proto3" json:"SuccessorList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StablizerData) Reset()         { *m = StablizerData{} }
func (m *StablizerData) String() string { return proto.CompactTextString(m) }
func (*StablizerData) ProtoMessage()    {}
func (*StablizerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{7}
}

func (m *StablizerData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StablizerData.Unmarshal(m, b)
}
func (m *StablizerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StablizerData.Marshal(b, m, deterministic)
}
func (m *StablizerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StablizerData.Merge(m, src)
}
func (m *StablizerData) XXX_Size() int {
	return xxx_messageInfo_StablizerData.Size(m)
}
func (m *StablizerData) XXX_DiscardUnknown() {
	xxx_messageInfo_StablizerData.DiscardUnknown(m)
}

var xxx_messageInfo_StablizerData proto.InternalMessageInfo

func (m *StablizerData) GetPredecessor() *Node {
	if m != nil {
		return m.Predecessor
	}
	return nil
}

func (m *StablizerData) GetSuccessorList() []*Node {
	if m != nil {
		return m.SuccessorList
	}
	return nil
}

type Nodes struct {
	Nodes                []*Node  `protobuf:"bytes,1,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nodes) Reset()         { *m = Nodes{} }
func (m *Nodes) String() string { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()    {}
func (*Nodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{8}
}

func (m *Nodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nodes.Unmarshal(m, b)
}
func (m *Nodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nodes.Marshal(b, m, deterministic)
}
func (m *Nodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nodes.Merge(m, src)
}
func (m *Nodes) XXX_Size() int {
	return xxx_messageInfo_Nodes.Size(m)
}
func (m *Nodes) XXX_DiscardUnknown() {
	xxx_messageInfo_Nodes.DiscardUnknown(m)
}

var xxx_messageInfo_Nodes proto.InternalMessageInfo

func (m *Nodes) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*Replication)(nil), "grpc.Replication")
	proto.RegisterType((*Lookup)(nil), "grpc.Lookup")
	proto.RegisterType((*MerkleNode)(nil), "grpc.MerkleNode")
	proto.RegisterType((*MerkleTree)(nil), "grpc.MerkleTree")
	proto.RegisterType((*ForwardSyncData)(nil), "grpc.ForwardSyncData")
	proto.RegisterType((*Content)(nil), "grpc.Content")
	proto.RegisterType((*Node)(nil), "grpc.Node")
	proto.RegisterType((*StablizerData)(nil), "grpc.StablizerData")
	proto.RegisterType((*Nodes)(nil), "grpc.Nodes")
}

func init() {
	proto.RegisterFile("chord.proto", fileDescriptor_541dae51990542ec)
}

var fileDescriptor_541dae51990542ec = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0x4d, 0xd2, 0xb8, 0xbf, 0x1f, 0xe3, 0xa4, 0xa4, 0x5b, 0x84, 0x22, 0x23, 0x50, 0xd8, 0x43,
	0x55, 0x0a, 0x72, 0xa2, 0x50, 0x0e, 0x88, 0x1b, 0x85, 0x84, 0x42, 0x1a, 0x45, 0x0e, 0xe2, 0xbe,
	0xb1, 0x37, 0x89, 0x55, 0xd7, 0x63, 0xad, 0x37, 0xaa, 0xc2, 0x27, 0x80, 0x6f, 0x8d, 0x76, 0x37,
	0x7f, 0xd6, 0x6e, 0x11, 0xb7, 0xf1, 0xbc, 0xf7, 0x66, 0xe6, 0xcd, 0x8e, 0xc1, 0x0d, 0x97, 0x28,
	0x22, 0x3f, 0x13, 0x28, 0x91, 0xd4, 0x17, 0x22, 0x0b, 0xbd, 0x67, 0x0b, 0xc4, 0x45, 0xc2, 0xbb,
	0x3a, 0x37, 0x5b, 0xcd, 0xbb, 0xfc, 0x36, 0x93, 0x6b, 0x43, 0xf1, 0x5e, 0x94, 0xc1, 0x3b, 0xc1,
	0xb2, 0x8c, 0x8b, 0xdc, 0xe0, 0xf4, 0x25, 0xb8, 0x01, 0xcf, 0x92, 0x38, 0x64, 0x32, 0xc6, 0x94,
	0x10, 0xa8, 0x7f, 0x62, 0x92, 0xb5, 0xab, 0x9d, 0xea, 0x59, 0x23, 0xd0, 0x31, 0xf5, 0xe0, 0x70,
	0x84, 0x78, 0xb3, 0xca, 0x48, 0x0b, 0x0e, 0xbe, 0xf1, 0xf5, 0x06, 0x54, 0x21, 0xfd, 0x0a, 0x70,
	0xcd, 0xc5, 0x4d, 0xc2, 0xc7, 0x18, 0x71, 0xa5, 0xfe, 0xc2, 0xf2, 0xe5, 0x56, 0xad, 0x62, 0x95,
	0x1b, 0xf1, 0xb9, 0x6c, 0xd7, 0x4c, 0x4e, 0xc5, 0xe4, 0x09, 0x38, 0x41, 0xbc, 0x58, 0xca, 0xf6,
	0x81, 0x4e, 0x9a, 0x0f, 0x3a, 0xd9, 0xd6, 0xfa, 0x2e, 0x38, 0x27, 0xa7, 0xe0, 0xa4, 0x18, 0xf1,
	0xbc, 0x5d, 0xed, 0x1c, 0x9c, 0xb9, 0xfd, 0x96, 0xaf, 0xbc, 0xfa, 0xfb, 0x66, 0x81, 0x81, 0x89,
	0x07, 0xff, 0x0b, 0x44, 0xa9, 0xfb, 0x9a, 0x1e, 0xbb, 0x6f, 0xfa, 0xbb, 0x0a, 0x8f, 0x07, 0x28,
	0xee, 0x98, 0x88, 0xa6, 0xeb, 0x34, 0x54, 0x6e, 0xd4, 0x3c, 0x91, 0xe5, 0x50, 0xc5, 0xa4, 0x07,
	0x27, 0x99, 0xe0, 0x11, 0x0f, 0x79, 0x9e, 0xa3, 0x18, 0xc5, 0xb9, 0x5d, 0xee, 0x21, 0x88, 0xf4,
	0x00, 0x6e, 0x77, 0xb3, 0x6a, 0x1b, 0xa5, 0x11, 0x55, 0x3e, 0xb0, 0x38, 0xf4, 0x39, 0xfc, 0x77,
	0x89, 0xa9, 0xe4, 0xa9, 0x7c, 0x68, 0x04, 0x7a, 0x0e, 0x75, 0xbd, 0xc2, 0x23, 0xa8, 0x5d, 0x4d,
	0x34, 0xf2, 0x28, 0xa8, 0x5d, 0x4d, 0x14, 0x77, 0x82, 0xc2, 0xac, 0xcf, 0x09, 0x74, 0x4c, 0x11,
	0x9a, 0x53, 0xc9, 0x66, 0x49, 0xfc, 0x93, 0x0b, 0xed, 0xe9, 0x0d, 0xb8, 0x93, 0xfd, 0x90, 0x5a,
	0xed, 0xf6, 0xc1, 0x8c, 0xa3, 0x77, 0x65, 0xc3, 0xa4, 0x07, 0xcd, 0xe9, 0x2a, 0xdc, 0x1b, 0x6a,
	0xd7, 0xf4, 0x86, 0x6d, 0x7e, 0x91, 0x40, 0x5f, 0x81, 0x33, 0xd6, 0xcb, 0xee, 0x6c, 0x82, 0xcd,
	0xa3, 0xd8, 0x12, 0x03, 0xf4, 0x7f, 0xd5, 0xc1, 0xb9, 0x54, 0x27, 0x4a, 0x2e, 0xa0, 0x31, 0xe4,
	0x72, 0x57, 0x88, 0x3c, 0xf5, 0xcd, 0x29, 0xfa, 0xdb, 0x53, 0xf4, 0x3f, 0xab, 0x3b, 0xf5, 0xac,
	0x22, 0xb4, 0x42, 0x5e, 0x43, 0x73, 0x10, 0xa7, 0xd1, 0x5e, 0xd6, 0x30, 0xb0, 0xb9, 0xc0, 0x12,
	0xf9, 0x1c, 0x8e, 0x86, 0x5c, 0xda, 0xde, 0x2c, 0xbc, 0xc4, 0xed, 0xc3, 0xe1, 0x18, 0x65, 0x3c,
	0x5f, 0x17, 0x38, 0xde, 0xbd, 0xa1, 0x3e, 0x22, 0x26, 0x3f, 0x58, 0xb2, 0x52, 0x9a, 0xf7, 0xd0,
	0xb2, 0x2d, 0xa8, 0x5d, 0xfc, 0xd5, 0x86, 0xbb, 0xaf, 0x9a, 0xd3, 0x0a, 0x79, 0x67, 0xa4, 0x85,
	0x67, 0xb2, 0x1b, 0x9f, 0x98, 0xb8, 0x40, 0xa0, 0x15, 0xd2, 0x05, 0x52, 0x74, 0xa4, 0x7b, 0xda,
	0xc2, 0x52, 0x9f, 0x0f, 0x70, 0x3c, 0x4c, 0x70, 0xc6, 0x92, 0x6b, 0x16, 0xab, 0xeb, 0x62, 0x69,
	0xc8, 0xc9, 0xb1, 0xe1, 0x58, 0x3f, 0xb6, 0x77, 0x3f, 0x45, 0x2b, 0xe4, 0x02, 0x9c, 0xa9, 0x44,
	0xc1, 0x49, 0xd3, 0xa0, 0x9b, 0x03, 0xfd, 0xc7, 0x56, 0x4e, 0xc1, 0x19, 0x70, 0x19, 0x2e, 0x4b,
	0x4f, 0x53, 0xac, 0x41, 0x2b, 0xb3, 0x43, 0xad, 0x7e, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0xf5,
	0x33, 0x79, 0x8e, 0xb3, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChordClient is the client API for Chord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChordClient interface {
	GetSuccessor(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Node, error)
	FindSuccessor(ctx context.Context, in *Lookup, opts ...grpc.CallOption) (*Node, error)
	GetPredecessor(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	Notify(ctx context.Context, in *Node, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	GetSuccessorList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Nodes, error)
	GetStablizerData(ctx context.Context, in *Node, opts ...grpc.CallOption) (*StablizerData, error)
	GetPredecessorList(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Nodes, error)
	GlobalMaintenance(ctx context.Context, in *Replication, opts ...grpc.CallOption) (*Replication, error)
	Store(ctx context.Context, in *Content, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	Fetch(ctx context.Context, in *Lookup, opts ...grpc.CallOption) (*Content, error)
}

type chordClient struct {
	cc grpc.ClientConnInterface
}

func NewChordClient(cc grpc.ClientConnInterface) ChordClient {
	return &chordClient{cc}
}

func (c *chordClient) GetSuccessor(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/grpc.Chord/GetSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) FindSuccessor(ctx context.Context, in *Lookup, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/grpc.Chord/FindSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GetPredecessor(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/grpc.Chord/GetPredecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Notify(ctx context.Context, in *Node, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/grpc.Chord/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GetSuccessorList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/grpc.Chord/GetSuccessorList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GetStablizerData(ctx context.Context, in *Node, opts ...grpc.CallOption) (*StablizerData, error) {
	out := new(StablizerData)
	err := c.cc.Invoke(ctx, "/grpc.Chord/GetStablizerData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GetPredecessorList(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/grpc.Chord/GetPredecessorList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GlobalMaintenance(ctx context.Context, in *Replication, opts ...grpc.CallOption) (*Replication, error) {
	out := new(Replication)
	err := c.cc.Invoke(ctx, "/grpc.Chord/GlobalMaintenance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Store(ctx context.Context, in *Content, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/grpc.Chord/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Fetch(ctx context.Context, in *Lookup, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/grpc.Chord/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChordServer is the server API for Chord service.
type ChordServer interface {
	GetSuccessor(context.Context, *empty.Empty) (*Node, error)
	FindSuccessor(context.Context, *Lookup) (*Node, error)
	GetPredecessor(context.Context, *Node) (*Node, error)
	Notify(context.Context, *Node) (*wrappers.BoolValue, error)
	GetSuccessorList(context.Context, *empty.Empty) (*Nodes, error)
	GetStablizerData(context.Context, *Node) (*StablizerData, error)
	GetPredecessorList(context.Context, *Node) (*Nodes, error)
	GlobalMaintenance(context.Context, *Replication) (*Replication, error)
	Store(context.Context, *Content) (*wrappers.BoolValue, error)
	Fetch(context.Context, *Lookup) (*Content, error)
}

// UnimplementedChordServer can be embedded to have forward compatible implementations.
type UnimplementedChordServer struct {
}

func (*UnimplementedChordServer) GetSuccessor(ctx context.Context, req *empty.Empty) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuccessor not implemented")
}
func (*UnimplementedChordServer) FindSuccessor(ctx context.Context, req *Lookup) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessor not implemented")
}
func (*UnimplementedChordServer) GetPredecessor(ctx context.Context, req *Node) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredecessor not implemented")
}
func (*UnimplementedChordServer) Notify(ctx context.Context, req *Node) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (*UnimplementedChordServer) GetSuccessorList(ctx context.Context, req *empty.Empty) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuccessorList not implemented")
}
func (*UnimplementedChordServer) GetStablizerData(ctx context.Context, req *Node) (*StablizerData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStablizerData not implemented")
}
func (*UnimplementedChordServer) GetPredecessorList(ctx context.Context, req *Node) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredecessorList not implemented")
}
func (*UnimplementedChordServer) GlobalMaintenance(ctx context.Context, req *Replication) (*Replication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalMaintenance not implemented")
}
func (*UnimplementedChordServer) Store(ctx context.Context, req *Content) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (*UnimplementedChordServer) Fetch(ctx context.Context, req *Lookup) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}

func RegisterChordServer(s *grpc.Server, srv ChordServer) {
	s.RegisterService(&_Chord_serviceDesc, srv)
}

func _Chord_GetSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Chord/GetSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetSuccessor(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lookup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Chord/FindSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).FindSuccessor(ctx, req.(*Lookup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GetPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Chord/GetPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetPredecessor(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Chord/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Notify(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GetSuccessorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetSuccessorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Chord/GetSuccessorList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetSuccessorList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GetStablizerData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetStablizerData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Chord/GetStablizerData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetStablizerData(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GetPredecessorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetPredecessorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Chord/GetPredecessorList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetPredecessorList(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GlobalMaintenance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Replication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GlobalMaintenance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Chord/GlobalMaintenance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GlobalMaintenance(ctx, req.(*Replication))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Chord/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Store(ctx, req.(*Content))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lookup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Chord/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Fetch(ctx, req.(*Lookup))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Chord",
	HandlerType: (*ChordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSuccessor",
			Handler:    _Chord_GetSuccessor_Handler,
		},
		{
			MethodName: "FindSuccessor",
			Handler:    _Chord_FindSuccessor_Handler,
		},
		{
			MethodName: "GetPredecessor",
			Handler:    _Chord_GetPredecessor_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Chord_Notify_Handler,
		},
		{
			MethodName: "GetSuccessorList",
			Handler:    _Chord_GetSuccessorList_Handler,
		},
		{
			MethodName: "GetStablizerData",
			Handler:    _Chord_GetStablizerData_Handler,
		},
		{
			MethodName: "GetPredecessorList",
			Handler:    _Chord_GetPredecessorList_Handler,
		},
		{
			MethodName: "GlobalMaintenance",
			Handler:    _Chord_GlobalMaintenance_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _Chord_Store_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _Chord_Fetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chord.proto",
}
