// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package chord

import (
	"sync"
)

var (
	lockClientInterfaceMockFindSuccessor    sync.RWMutex
	lockClientInterfaceMockGetStablizerData sync.RWMutex
	lockClientInterfaceMockNotify           sync.RWMutex
	lockClientInterfaceMockPing             sync.RWMutex
)

// Ensure, that ClientInterfaceMock does implement ClientInterface.
// If this is not the case, regenerate this file with moq.
var _ ClientInterface = &ClientInterfaceMock{}

// ClientInterfaceMock is a mock implementation of ClientInterface.
//
//     func TestSomethingThatUsesClientInterface(t *testing.T) {
//
//         // make and configure a mocked ClientInterface
//         mockedClientInterface := &ClientInterfaceMock{
//             FindSuccessorFunc: func(remote *Node, identifier []byte) (*Node, error) {
// 	               panic("mock out the FindSuccessor method")
//             },
//             GetStablizerDataFunc: func(remote *Node, node *Node) (*Node, *SuccessorList, error) {
// 	               panic("mock out the GetStablizerData method")
//             },
//             NotifyFunc: func(remote *Node, node *Node) error {
// 	               panic("mock out the Notify method")
//             },
//             PingFunc: func(remote *Node) bool {
// 	               panic("mock out the Ping method")
//             },
//         }
//
//         // use mockedClientInterface in code that requires ClientInterface
//         // and then make assertions.
//
//     }
type ClientInterfaceMock struct {
	// FindSuccessorFunc mocks the FindSuccessor method.
	FindSuccessorFunc func(remote *Node, identifier []byte) (*Node, error)

	// GetStablizerDataFunc mocks the GetStablizerData method.
	GetStablizerDataFunc func(remote *Node, node *Node) (*Node, *SuccessorList, error)

	// NotifyFunc mocks the Notify method.
	NotifyFunc func(remote *Node, node *Node) error

	// PingFunc mocks the Ping method.
	PingFunc func(remote *Node) bool

	// calls tracks calls to the methods.
	calls struct {
		// FindSuccessor holds details about calls to the FindSuccessor method.
		FindSuccessor []struct {
			// Remote is the remote argument value.
			Remote *Node
			// Identifier is the identifier argument value.
			Identifier []byte
		}
		// GetStablizerData holds details about calls to the GetStablizerData method.
		GetStablizerData []struct {
			// Remote is the remote argument value.
			Remote *Node
			// Node is the node argument value.
			Node *Node
		}
		// Notify holds details about calls to the Notify method.
		Notify []struct {
			// Remote is the remote argument value.
			Remote *Node
			// Node is the node argument value.
			Node *Node
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
			// Remote is the remote argument value.
			Remote *Node
		}
	}
}

// FindSuccessor calls FindSuccessorFunc.
func (mock *ClientInterfaceMock) FindSuccessor(remote *Node, identifier []byte) (*Node, error) {
	if mock.FindSuccessorFunc == nil {
		panic("ClientInterfaceMock.FindSuccessorFunc: method is nil but ClientInterface.FindSuccessor was just called")
	}
	callInfo := struct {
		Remote     *Node
		Identifier []byte
	}{
		Remote:     remote,
		Identifier: identifier,
	}
	lockClientInterfaceMockFindSuccessor.Lock()
	mock.calls.FindSuccessor = append(mock.calls.FindSuccessor, callInfo)
	lockClientInterfaceMockFindSuccessor.Unlock()
	return mock.FindSuccessorFunc(remote, identifier)
}

// FindSuccessorCalls gets all the calls that were made to FindSuccessor.
// Check the length with:
//     len(mockedClientInterface.FindSuccessorCalls())
func (mock *ClientInterfaceMock) FindSuccessorCalls() []struct {
	Remote     *Node
	Identifier []byte
} {
	var calls []struct {
		Remote     *Node
		Identifier []byte
	}
	lockClientInterfaceMockFindSuccessor.RLock()
	calls = mock.calls.FindSuccessor
	lockClientInterfaceMockFindSuccessor.RUnlock()
	return calls
}

// GetStablizerData calls GetStablizerDataFunc.
func (mock *ClientInterfaceMock) GetStablizerData(remote *Node, node *Node) (*Node, *SuccessorList, error) {
	if mock.GetStablizerDataFunc == nil {
		panic("ClientInterfaceMock.GetStablizerDataFunc: method is nil but ClientInterface.GetStablizerData was just called")
	}
	callInfo := struct {
		Remote *Node
		Node   *Node
	}{
		Remote: remote,
		Node:   node,
	}
	lockClientInterfaceMockGetStablizerData.Lock()
	mock.calls.GetStablizerData = append(mock.calls.GetStablizerData, callInfo)
	lockClientInterfaceMockGetStablizerData.Unlock()
	return mock.GetStablizerDataFunc(remote, node)
}

// GetStablizerDataCalls gets all the calls that were made to GetStablizerData.
// Check the length with:
//     len(mockedClientInterface.GetStablizerDataCalls())
func (mock *ClientInterfaceMock) GetStablizerDataCalls() []struct {
	Remote *Node
	Node   *Node
} {
	var calls []struct {
		Remote *Node
		Node   *Node
	}
	lockClientInterfaceMockGetStablizerData.RLock()
	calls = mock.calls.GetStablizerData
	lockClientInterfaceMockGetStablizerData.RUnlock()
	return calls
}

// Notify calls NotifyFunc.
func (mock *ClientInterfaceMock) Notify(remote *Node, node *Node) error {
	if mock.NotifyFunc == nil {
		panic("ClientInterfaceMock.NotifyFunc: method is nil but ClientInterface.Notify was just called")
	}
	callInfo := struct {
		Remote *Node
		Node   *Node
	}{
		Remote: remote,
		Node:   node,
	}
	lockClientInterfaceMockNotify.Lock()
	mock.calls.Notify = append(mock.calls.Notify, callInfo)
	lockClientInterfaceMockNotify.Unlock()
	return mock.NotifyFunc(remote, node)
}

// NotifyCalls gets all the calls that were made to Notify.
// Check the length with:
//     len(mockedClientInterface.NotifyCalls())
func (mock *ClientInterfaceMock) NotifyCalls() []struct {
	Remote *Node
	Node   *Node
} {
	var calls []struct {
		Remote *Node
		Node   *Node
	}
	lockClientInterfaceMockNotify.RLock()
	calls = mock.calls.Notify
	lockClientInterfaceMockNotify.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *ClientInterfaceMock) Ping(remote *Node) bool {
	if mock.PingFunc == nil {
		panic("ClientInterfaceMock.PingFunc: method is nil but ClientInterface.Ping was just called")
	}
	callInfo := struct {
		Remote *Node
	}{
		Remote: remote,
	}
	lockClientInterfaceMockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	lockClientInterfaceMockPing.Unlock()
	return mock.PingFunc(remote)
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//     len(mockedClientInterface.PingCalls())
func (mock *ClientInterfaceMock) PingCalls() []struct {
	Remote *Node
} {
	var calls []struct {
		Remote *Node
	}
	lockClientInterfaceMockPing.RLock()
	calls = mock.calls.Ping
	lockClientInterfaceMockPing.RUnlock()
	return calls
}
